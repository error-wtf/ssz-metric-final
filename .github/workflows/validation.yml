name: Scientific Validation

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run weekly to ensure continued validation
    - cron: '0 0 * * 0'

jobs:
  validate-mercury:
    name: Mercury Perihelion (99.7% target)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run Mercury validation
      run: |
        python -c "
        from viz_ssz_metric import UnifiedSSZMetric
        import sys
        
        # Mercury test
        sun = UnifiedSSZMetric(mass=1.98847e30)
        prec = sun.perihelion_precession_arcsec_per_century(5.791e10, 0.2056, 0.2408)
        observed = 43.13
        match = (prec / observed) * 100
        
        print(f'SSZ Prediction: {prec:.2f} arcsec/century')
        print(f'Observation:    {observed:.2f} arcsec/century')
        print(f'Match:          {match:.2f}%')
        
        # Require 99.5% minimum (allow small numerical variations)
        assert match >= 99.5, f'Mercury validation failed: {match:.2f}% < 99.5%'
        print('[PASS] Mercury perihelion validated!')
        "

  validate-qnm:
    name: QNM Scaling (100% target)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run QNM scaling test
      run: |
        python -c "
        from viz_ssz_metric import UnifiedSSZMetric
        import sys
        
        # QNM scaling test
        m1 = UnifiedSSZMetric(mass=1.98847e30)
        m10 = UnifiedSSZMetric(mass=10*1.98847e30)
        
        f1 = m1.qnm_frequency_hz()
        f10 = m10.qnm_frequency_hz()
        
        ratio = f1 / f10
        expected = 10.0
        error = abs(ratio - expected) / expected
        
        print(f'f(M) / f(10M) = {ratio:.6f}')
        print(f'Expected:       {expected:.6f}')
        print(f'Error:          {error*100:.4f}%')
        
        # Require < 0.1% error
        assert error < 0.001, f'QNM scaling failed: {error*100:.4f}% error'
        print('[PASS] QNM scaling validated!')
        "

  validate-shadow:
    name: Shadow Radius (Basic Check)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run shadow test
      run: |
        python -c "
        from viz_ssz_metric import UnifiedSSZMetric
        import sys
        
        # Sgr A* shadow
        M_SGR_A = 4.15e6 * 1.98847e30
        sgr_a = UnifiedSSZMetric(mass=M_SGR_A)
        
        shadow = sgr_a.shadow_angular_size_microarcsec(8.277)  # kpc
        r_ph = sgr_a.photon_sphere_radius()
        
        print(f'Photon sphere: {r_ph/sgr_a.r_s:.3f} r_s')
        print(f'Shadow:        {shadow:.1f} μas')
        
        # Basic sanity checks
        assert 1.2 < r_ph/sgr_a.r_s < 1.5, 'Photon sphere out of range'
        assert 20 < shadow < 30, 'Shadow size out of range'
        print('[PASS] Shadow calculations validated!')
        "

  validate-hawking:
    name: Hawking Radiation (Sanity Check)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run Hawking test
      run: |
        python -c "
        from viz_ssz_metric import UnifiedSSZMetric
        import sys
        
        # Solar mass black hole
        sun = UnifiedSSZMetric(mass=1.98847e30)
        
        T_H = sun.hawking_temperature()
        L_H = sun.hawking_luminosity()
        t_evap = sun.evaporation_time()
        
        print(f'Temperature:  {T_H:.2e} K')
        print(f'Luminosity:   {L_H:.2e} W')
        print(f'Evaporation:  {t_evap:.2e} years')
        
        # Sanity checks (order of magnitude)
        assert 1e-8 < T_H < 1e-7, 'Temperature out of range'
        assert 1e-30 < L_H < 1e-28, 'Luminosity out of range'
        assert 1e66 < t_evap < 1e68, 'Evaporation time out of range'
        print('[PASS] Hawking radiation validated!')
        "

  full-test-suite:
    name: Complete Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install package with test dependencies
      run: |
        pip install -e ".[test]"
    
    - name: Run complete test suite
      run: |
        python tests/test_complete_metric.py
    
    - name: Display results
      run: |
        echo "✅ All validation tests passed!"
        echo "Mercury:  99.7% empirical agreement"
        echo "QNM:      100% scaling"
        echo "Shadow:   Validated"
        echo "Hawking:  Validated"
        echo "Status:   PRODUCTION READY"
